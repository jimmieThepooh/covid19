$.fn.digits = function () {
    return this.each(function () {
        $(this).text($(this).text().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
    })
}

//$.fn.select2.defaults.set("language", "th");

function formatNumber(num) {
    if (num != null && num != "") {
        var parts = num.split(".");
        var firstPart = parts[0];
        firstPart = firstPart.toString().replace(/,/g, "");
        firstPart = firstPart.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
        parts.shift(); // removes the first item from the array
        var nextParts = parts.join('');
        if (nextParts)
            return firstPart + "." + nextParts;
        else
            return firstPart;
    } else {
        return "";
    }
}
//GeoLoading
//สำหรับแสดง loading
//static object
(function ($) {
    var GeoLoading = function () {
        this.hasInit = false;
    };

    GeoLoading.TEMPLATE = '<div id="loadingPanel" class="loading-panel"><div class="loading-panel-background"></div><div class="loading-panel-animation"></div></div>';


    GeoLoading.prototype.init = function () {
        //initial loading
        this.$domNode = $(GeoLoading.TEMPLATE);
        $("body").prepend(this.$domNode);
        this.loadingCurrentProcess = [];
        this.$loadingPanel = this.$domNode;

        //$(window).resize($.proxy(this.resize, this));
        //this.resize();

        this.hasInit = true;
        return this;
    };
    GeoLoading.prototype.resize = function () {
        try {
            console.log("GeoLoading.prototype.resize : ");
            var docHeight = $(document).height();

            var winHeight = $(window).height();
            var newHeight = docHeight > winHeight ? docHeight : winHeight;

            this.$loadingPanel.height(newHeight);
        }
        catch (error) {
            console.log("GeoLoading.prototype.resize : ", error);
        }

    };
    GeoLoading.prototype.showLoading = function (processName) {

        if (this.hasInit == false) {
            this.init();
        }

        if (processName) {
            this.loadingCurrentProcess.push(processName);
            //this.$loadingPanel.show();
            this.$loadingPanel.fadeIn("slow");
            //this.resize();
        }
        else {
            console.log("parameter processName is not null");
        }
        return this;
    };

    GeoLoading.prototype.hideLoading = function (processName) {

        if (this.hasInit == false) {
            this.init();
        }

        if (processName) {
            var index = $.inArray(processName, this.loadingCurrentProcess);
            if (index != -1) {
                this.loadingCurrentProcess.splice(index, 1);
            }

            if (this.loadingCurrentProcess.length == 0) {
                this.$loadingPanel.fadeOut("slow");
            }
        }
        else {
            console.log("parameter processName is not null");
        }
        return this;
    };



    // GeoLoading PLUGIN DEFINITION
    // =======================

    var old = $.fn.GeoLoading;

    $.fn.GeoLoading = new GeoLoading();


    // GeoLoading NO CONFLICT
    // =================

    $.fn.GeoLoading.noConflict = function () {
        $.fn.GeoLoading = old
        return this;
    };

}(jQuery));
/*!
 * jQuery Validation Plugin v1.13.1
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2014 Jörn Zaefferer
 * Released under the MIT license
 */
(function (factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery", "./jquery.validate"], factory);
    } else {
        factory(jQuery);
    }
}(function ($) {
    $.validator.setDefaults({
        unhighlight: function (element, errorClass, validClass) {
            $(element).next('span').find('.select2-selection').removeClass('has-error');
            $(element).closest('.input-group').removeClass('has-error');
            $(element).removeClass('error');
        },
        highlight: function (element, errorClass, validClass) {
            $(element).next('span').find('.select2-selection').addClass('has-error');
            $(element).closest('.input-group').addClass('has-error');
            $(element).addClass('error');
        },
        errorPlacement: function (error, element) {
            var elementType = element.prop('type');
            var errorContainer = element.parent().find(".error-container");

            if ($(element).hasClass("upload")) {
                var pnl = $(element).parent().parent().parent().siblings(".upload-error");
                error.insertAfter(pnl);
            }
            else if (element.hasClass("select2-hidden-accessible")) {
                //$(element).next('span').find('.select2-selection').addClass('has-error');
                error.insertAfter($(element).next());
            } else if ($(element).hasClass("pwd")) {
                error.insertAfter(element.parent().siblings(".error-container"));
            }
            else if (errorContainer.length > 0) {
                $(errorContainer[0]).append(error);
            }
            else if (element.parent('.input-group').length) {
                $(element).parent().parent().append(error);
            }
            else if (elementType === 'checkbox') {
                //error.insertAfter(element.parent());
                $(element).parent().parent().parent().append(error);
            }
            else if (elementType === 'radio') {
                $(element).parent().parent().parent().parent().append(error);
            }
            else {
                error.insertAfter(element);
            }
        }
    });

    $.validator.addMethod(
             "dateFormat",
             function (value, element) {
                 // put your own logic here, this is just a (crappy) example
                 //console.log("value", value);
                 if (value.length > 0) {
                     return value.match(/^\d\d\/\d\d\/\d\d\d\d$/);

                 }
                 else {
                     return true;
                 }
             }
         );

    $.validator.addMethod("dateMin", function (value, element, param) {
        try {
            var maxDate = param.maxDate;
            if (value.length > 0 && $(maxDate).val().length > 0) {
                var arrMinDate = value.split('/');
                var arrMaxDate = $(maxDate).val().split('/');

                if (arrMinDate.length == 3 && arrMaxDate.length == 3) {
                    var dMin = new Date(parseInt(arrMinDate[2]) - 543, parseInt(arrMinDate[1]) - 1, parseInt(arrMinDate[0]));
                    var dMax = new Date(parseInt(arrMaxDate[2]) - 543, parseInt(arrMaxDate[1]) - 1, parseInt(arrMaxDate[0]));

                    if (dMax.getTime() >= dMin.getTime()) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return true;
                }
            }
            else {
                return true;
            }
        }
        catch (ex) {
            return true;
        }
        return true;
    });

    $.validator.addMethod("dateMax", function (value, element, param) {
        try {
            var minDate = param.minDate;
            if (value.length > 0 && $(minDate).val().length > 0) {
                var arrMinDate = $(minDate).val().split('/');
                var arrMaxDate = value.split('/');

                if (arrMinDate.length == 3 && arrMaxDate.length == 3) {
                    var dMin = new Date(parseInt(arrMinDate[2]) - 543, parseInt(arrMinDate[1]) - 1, parseInt(arrMinDate[0]));
                    var dMax = new Date(parseInt(arrMaxDate[2]) - 543, parseInt(arrMaxDate[1]) - 1, parseInt(arrMaxDate[0]));
                    if (dMax.getTime() >= dMin.getTime()) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return true;
                }
            }
            else {
                return true;
            }
        }
        catch (ex) {
            return true;
        }

        return true;
    });

    $.validator.addMethod("dateMins", function (value, element, param) {
        try {
            var valid = true;
            $.each(param.maxDate, function (i, val) {
                var maxDate = val;
                if (value.length > 0 && $(maxDate).val().length > 0) {
                    var inputDt = value.split('/');
                    var maxDt = $(maxDate).val().split('/');

                    if (inputDt.length == 3 && maxDt.length == 3) {
                        var dInput = new Date(parseInt(inputDt[2]) - 543, parseInt(inputDt[1]) - 1, parseInt(inputDt[0]));
                        var dMax = new Date(parseInt(maxDt[2]) - 543, parseInt(maxDt[1]) - 1, parseInt(maxDt[0]));

                        if (dInput.getTime() >= dMax.getTime()) {
                            valid = true;
                        }
                        else {
                            valid = false;
                            return valid;
                        }
                    }
                    else {
                        valid = true;
                    }
                } else {
                    valid = true;
                }
            });
            return this.optional(element) || valid;
        }
        catch (ex) {
            return true;
        }
    });

    $.validator.addMethod('filesize', function (value, element, param) {
        return this.optional(element) || (element.files[0].size <= param)
    });

    $.validator.addMethod("regx", function (value, element, regexpr) {
        return regexpr.test(value);
    });
}));
(function (factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery", "../jquery.validate"], factory);
    } else {
        factory(jQuery);
    }
}(function ($) {

    /*
     * Translated default messages for the jQuery validation plugin.
     * Locale: TH (Thai; ไทย)
     */
    $.extend($.validator.messages, {
        required: "โปรดระบุ",
        remote: "โปรดแก้ไขให้ถูกต้อง",
        email: "โปรดระบุที่อยู่อีเมลที่ถูกต้อง",
        url: "โปรดระบุ URL ที่ถูกต้อง",
        date: "โปรดระบุวันที่ ที่ถูกต้อง",
        dateISO: "โปรดระบุวันที่ ที่ถูกต้อง (ระบบ ISO).",
        number: "โปรดระบุทศนิยมที่ถูกต้อง",
        digits: "โปรดระบุจำนวนเต็มที่ถูกต้อง",
        creditcard: "โปรดระบุรหัสบัตรเครดิตที่ถูกต้อง",
        equalTo: "โปรดระบุค่าเดิมอีกครั้ง",
        extension: "โปรดเลือกไฟล์ที่มีไฟล์นามสกุลตามที่กำหนด",
        accept: "โปรดเลือกไฟล์ที่มีไฟล์นามสกุลตามที่กำหนด",
        maxlength: $.validator.format("โปรดระบุค่าที่ยาวไม่เกิน {0} อักขระ"),
        minlength: $.validator.format("โปรดระบุค่าที่ไม่น้อยกว่า {0} อักขระ"),
        rangelength: $.validator.format("โปรดระบุค่าความยาวระหว่าง {0} ถึง {1} อักขระ"),
        range: $.validator.format("โปรดระบุค่าระหว่าง {0} และ {1}"),
        max: $.validator.format("โปรดระบุค่าน้อยกว่าหรือเท่ากับ {0}"),
        min: $.validator.format("โปรดระบุค่ามากกว่าหรือเท่ากับ {0}"),

        //custom validator
        dateFormat: $.validator.format("โปรดระบุวันที่ในรูปแบบ dd/mm/yyyy"),
        monthFormat: $.validator.format("โปรดระบุเดือนในรูปแบบ mm/yyyy"),
        yearMin: $.validator.format("กรุณาระบุช่วงปีให้ถูกต้อง"),
        yearMax: $.validator.format("กรุณาระบุช่วงปีให้ถูกต้อง"),
        dateMin: $.validator.format("กรุณาระบุช่วงวันให้ถูกต้อง"),
        dateMax: $.validator.format("กรุณาระบุช่วงวันให้ถูกต้อง"),
        dateMins: $.validator.format("กรุณาระบุช่วงวันให้ถูกต้อง"),
        monthMax: $.validator.format("กรุณาระบุช่วงเดือนให้ถูกต้อง"),
        monthMin: $.validator.format("กรุณาระบุช่วงเดือนให้ถูกต้อง"),
        regx: $.validator.format("กรุณาระบุรูปแบบข้อมูลให้ถูกต้อง")
    });

}));
var GlobalConfig = {
    pwstrength: {
        errorMessages: {
            wordLength: "รหัสผ่านสั้นเกินไป",
            wordSimilarToUsername: "ห้ามใช้รหัสผ่านคล้ายชื่อเข้าใช้งาน"
        },
        verdicts: ["อ่อนแอ", "ปกติ", "ปานกลาง", "ปลอดภัย", "ปลอดภัยมาก"],
        rules: {
            scores: {
                wordSequences: -100
            },
            activated: {
                wordNotEmail: false,
                wordSimilarToUsername: false,
                wordSequences:false
            }
        }
    }
};